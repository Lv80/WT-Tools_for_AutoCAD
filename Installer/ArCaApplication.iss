; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{AE39A0A3-E831-4D4B-A80D-FC90AB6017CS}
AppName=WT-Tools
AppVerName=WT-Tools
VersionInfoCompany=test
AppPublisher=test
AppPublisherURL=http://www.WT-Tools.com/
AppSupportURL=http://www.WT-Tools.com/
AppUpdatesURL=http://www.WT-Tools.com/
DefaultDirName={pf}\WT-Tools
OutputDir=.\
ArchitecturesInstallIn64BitMode=x64
;WizardImageFile=.\Resources\RightLogo.bmp
;WizardSmallImageFile=.\Resources\UpperLogo.bmp
OutputBaseFilename=WT-Tools_64
Compression=lzma
SolidCompression=true
UsePreviousAppDir=false
WizardImageStretch=false
AllowUNCPath=false
ShowLanguageDialog=no
UserInfoPage=false
DisableDirPage=no
DisableReadyPage=no
CreateUninstallRegKey=yes

[Languages]
Name: english; MessagesFile: .\Resources\Default_AutoCAD.isl; LicenseFile: .\Resources\WT_Tools License Agreement.rtf

[UninstallDelete]
Name: {app}; Type: filesandordirs

[Files]
;###################################### Installer Util ######################################
Source: .\InstallerUtil.exe; DestDir: {app}; Flags: overwritereadonly ignoreversion uninsremovereadonly replacesameversion
Source: .\psvince.dll; DestDir: {app}; Flags: overwritereadonly ignoreversion uninsremovereadonly replacesameversion

;#######################################################################################
;######################################### R19 #########################################
Source: ..\x64\Release\ArCaConfig.xml; DestDir: {app}\AutoCAD 2013\; Flags: restartreplace overwritereadonly ignoreversion uninsremovereadonly replacesameversion;
Source: ..\x64\Release\DB.dwg; DestDir: {app}\AutoCAD 2013\; Flags: restartreplace overwritereadonly ignoreversion uninsremovereadonly replacesameversion;
Source: ..\x64\Release\ArCaArCaObjects.dbx; DestDir: {app}\AutoCAD 2013\; Flags: restartreplace overwritereadonly ignoreversion uninsremovereadonly replacesameversion;
Source: ..\x64\Release\ArCaArCaWrapper.dll; DestDir: {app}\AutoCAD 2013\; Flags: restartreplace overwritereadonly ignoreversion uninsremovereadonly replacesameversion;
Source: ..\x64\Release\WT-Tools.dll; DestDir: {app}\AutoCAD 2013\; Flags: restartreplace overwritereadonly ignoreversion uninsremovereadonly replacesameversion; AfterInstall: AfterInstallAdjustment
;#######################################################################################

[Registry]
Root: HKLM; Subkey: SOFTWARE\WT-Tools; ValueType: string; ValueName: InstallPath; ValueData: {app}; Flags: uninsdeletekey
Root: HKLM; Subkey: SOFTWARE\WT-Tools; ValueType: string; ValueName: UninstallApp; ValueData: {uninstallexe}; Flags: uninsdeletekey

[Code]
var sAutoCAD2013ReleaseNumber: String;
var lstAutoCAD2013Versions: TArrayOfString;
var lstAutoCADPaths: TArrayOfString;
var lstAutoCADReleases: TArrayOfString;
var lstAutoCADRegPaths: TArrayOfString;
var sAutoCADRegPath: String;
var sWT_ToolsRegPathTail: String;
var checkMaxIndex: Integer;
var	Page: TWizardPage;
var checkListBox: TNewCheckListBox;

function IsModuleLoaded(modulename: AnsiString ):  Boolean;
external 'IsModuleLoaded2@files:psvince.dll stdcall';

function GetAutoCADFolder(sAutoCADReleaseNumber: String; sAutoCADVersion: String): String;
var sAutoCADFolder: String;
begin
	RegQueryStringValue(HKEY_LOCAL_MACHINE, sAutoCADRegPath + sAutoCADReleaseNumber + '\' + sAutoCADVersion, 'AcadLocation', sAutoCADFolder);
	Result := sAutoCADFolder;
end;

function GetAutoCADData(sAutoCADReleaseNumber: String; sAutoCADVersion: String): TArrayOfString;
var lstAutoCADData: TArrayOfString;
	sProductName: String;
	sRelease: String;
	sProductId: String;
begin
	RegQueryStringValue(HKEY_LOCAL_MACHINE, sAutoCADRegPath + sAutoCADReleaseNumber + '\' + sAutoCADVersion, 'ProductName', sProductName);
	RegQueryStringValue(HKEY_LOCAL_MACHINE, sAutoCADRegPath + sAutoCADReleaseNumber + '\' + sAutoCADVersion, 'Release', sRelease);
	RegQueryStringValue(HKEY_LOCAL_MACHINE, sAutoCADRegPath + sAutoCADReleaseNumber + '\' + sAutoCADVersion, 'ProductId', sProductId);
	lstAutoCADData := [sProductName, sRelease, sProductId] ;
	Result := lstAutoCADData;
end;

function GetAutoCADVersions(sAutoCADReleaseNumber: String): TArrayOfString;
var lstAutoCADVersion: TArrayOfString;
	lstAutoCADValid: TArrayOfString;
	lstReleaseData: TArrayOfString;
	validAutoCADCount: Integer;
	j: Integer;
	i: Integer;
begin
	// I think is in InstalerUtils.exe
	RegGetSubkeyNames(HKEY_LOCAL_MACHINE, sAutoCADRegPath + sAutoCADReleaseNumber, lstAutoCADVersion);
	validAutoCADCount := 0;

	//Luca's gambi to get array length
	for i := 0 to GetArrayLength(lstAutoCADVersion)-1 do // I think it's inosetup
	begin
		lstReleaseData := GetAutoCADData(sAutoCADReleaseNumber, lstAutoCADVersion[i]);
		if	(lstReleaseData[1] <> '') and
			(lstReleaseData[2] <> '') then
		begin
			validAutoCADCount := validAutoCADCount + 1;
		end;
	end;

	SetArrayLength(lstAutoCADValid, validAutoCADCount);

	j := 0;
	for i := 0 to GetArrayLength(lstAutoCADVersion)-1 do 
	begin
		lstReleaseData := GetAutoCADData(sAutoCADReleaseNumber, lstAutoCADVersion[i]);
		if	(lstReleaseData[1] <> '') and
			(lstReleaseData[2] <> '') then
		begin
			lstAutoCADValid[j] := lstAutoCADVersion[i];
			j := j + 1;
		end;
	end;

	Result := lstAutoCADValid;

end;

procedure RemoveTestFilesFrom(sCurrDir: String);
var filesToRemove: TArrayOfString;
	i: Integer;
begin

	filesToRemove := [	'ArCaConfig.xml',
						'ArCaArCaObjects.dbx',
						'ArCaArCaWrapper.dll',
						'WT-Tools.dll'];

	for i := 0 to GetArrayLength(filesToRemove)-1 do
	begin
		DeleteFile (sCurrDir+'\'+filesToRemove[i]);
	end;

end;

function InitializeUninstall(): Boolean;
var sCurrentKey: String;
	sAutoCADFolder: String;
	i: Integer;
begin

	// Inicializa as Variáveis
	sAutoCAD2013ReleaseNumber := 'R19.0';
	sAutoCADRegPath := 'SOFTWARE\Autodesk\AutoCAD\';
	sWT_ToolsRegPathTail := '\Applications\WT-Tools\';

	// Busca por todos os autocads de releases compatíveis instalados
	lstAutoCAD2013Versions := GetAutoCADVersions(sAutoCAD2013ReleaseNumber);

  for i := 0 to GetArrayLength(lstAutoCAD2013Versions)-1 do
	begin

		sCurrentKey := sAutoCADRegPath + '\' + sAutoCAD2013ReleaseNumber + '\' + lstAutoCAD2013Versions[i] + sWT_ToolsRegPathTail;
		if ( RegKeyExists(HKCU, sCurrentKey)) then
		begin

			RegQueryStringValue(HKEY_LOCAL_MACHINE, sAutoCADRegPath + '\' + sAutoCAD2013ReleaseNumber + '\' + lstAutoCAD2013Versions[i], 'AcadLocation', sAutoCADFolder);
			RemoveTestFilesFrom (sAutoCADFolder);
			RegDeleteKeyIncludingSubkeys (HKCU, sCurrentKey);
		end

	end;


	Result := True;

end;

function ShouldInitialMarkToInstall (sRegPath: String): Boolean;
begin

	if not RegKeyExists(HKEY_LOCAL_MACHINE, 'Software\WT-Tools') then
	begin
		Result := True;
	end
	else
	begin
		Result := RegKeyExists(HKEY_LOCAL_MACHINE,  sAutoCADRegPath + '\' + sRegPath + '\' + sWT_ToolsRegPathTail);
	end;

end;

procedure CopyDirTree (sFromDir: String; sToDir: String);
var FindRec: TFindRec;
begin

	if FindFirst(sFromDir+'\*', FindRec) then begin

		try
			repeat

				if	(FindRec.Attributes and FILE_ATTRIBUTE_DIRECTORY = 0) and
					(FindRec.Attributes and FILE_ATTRIBUTE_TEMPORARY = 0) and
					(FindRec.Attributes and FILE_ATTRIBUTE_HIDDEN = 0) and
					(FindRec.Attributes and FILE_ATTRIBUTE_SYSTEM = 0) then
				begin

					if not DirExists(sToDir) then
					begin
						CreateDir (sToDir);
					end;

					FileCopy(sFromDir+'\'+FindRec.Name, sToDir+'\'+FindRec.Name, False);
				end
				else begin
					if	(FindRec.Name <> '.') and
						(FindRec.Name <> '..') and
						(FindRec.Attributes and FILE_ATTRIBUTE_TEMPORARY = 0) and
						(FindRec.Attributes and FILE_ATTRIBUTE_HIDDEN = 0) and
						(FindRec.Attributes and FILE_ATTRIBUTE_SYSTEM = 0) then
						begin
							CopyDirTree (sFromDir + '\' + FindRec.Name, sToDir + '\' + FindRec.Name);
						end;
				end;

			until not FindNext(FindRec);
		finally
			FindClose(FindRec);
		end;
	end;

end;

procedure RegisterApp (sCurrentRegPath: String; sCurrentCadPath: String);
var sOfcdesktoolsRegPath: String;
begin

	sOfcdesktoolsRegPath := sAutoCADRegPath + sCurrentRegPath + sWT_ToolsRegPathTail;
	RegWriteStringValue (HKEY_CURRENT_USER, sOfcdesktoolsRegPath, 'DESCRIPTION', 'WT-Tools');
	RegWriteDWordValue (HKEY_CURRENT_USER, sOfcdesktoolsRegPath, 'LOADCTRLS', 2);
	RegWriteStringValue (HKEY_CURRENT_USER, sOfcdesktoolsRegPath, 'LOADER', sCurrentCadPath + '\WT-Tools.dll');
	RegWriteDWordValue (HKEY_CURRENT_USER, sOfcdesktoolsRegPath, 'MANAGED', 1);

	RegWriteStringValue (HKEY_CURRENT_USER, sOfcdesktoolsRegPath+'\Commands', 'RefI', 'RefI');
	RegWriteStringValue (HKEY_CURRENT_USER, sOfcdesktoolsRegPath+'\Groups', 'RefI', 'RefI');

end;

procedure AfterInstallAdjustment();
var	i: Integer;
	sFrom: String;
begin

	for i := 0 to checkMaxIndex do
	begin
		if( checkListBox.Checked[i] )then
		begin
			sFrom := ExpandConstant('{app}\AutoCAD 2013');
			CopyDirTree (sFrom, lstAutoCADPaths[i]);
			RegisterApp (lstAutoCADRegPaths[i], lstAutoCADPaths[i]);
		end;
	end;

end;

procedure BeforeInstallAdjustment();
var	sUninstaller: String;
	iResultCode: Integer;
begin

	sUninstaller := ExpandConstant('{reg:HKLM\Software\WT-Tools,UninstallApp}');
	if (sUninstaller <> '') then
	begin
		Exec(sUninstaller, '/SILENT','', SW_SHOW, ewWaitUntilTerminated, iResultCode);
	end;

end;

function NextButtonClick(CurPageID: Integer): Boolean;
var checked: Integer;
	i: Integer;
begin

	Result := True;

	if (Page.ID = CurPageID) then
	begin

		checked := 0;

		for i := 0 to checkMaxIndex do
		begin
			if( checkListBox.Checked[i] )then
			begin
				checked := checked + 1;
			end;
		end;

		if (checked <= 0) then
		begin
			MsgBox(ExpandConstant('{cm:NoAutoCADSelected}'), mbInformation, MB_OK);
			Result := False;
		end;

	end;

	if (wpReady = CurPageID) then
	begin
		BeforeInstallAdjustment;
	end;

end;

function InitializeSetup(): Boolean;
var
    iOpenCadReturn: Integer;
begin
	result := true;

	// Inicializa as Variáveis
	sAutoCAD2013ReleaseNumber := 'R19.0';
	sAutoCADRegPath := 'SOFTWARE\Autodesk\AutoCAD\';
	sWT_ToolsRegPathTail := '\Applications\WT-Tools\';
    iOpenCadReturn := IDOK;

	// Busca por todos os autocads de releases compatíveis instalados
	lstAutoCAD2013Versions := GetAutoCADVersions (sAutoCAD2013ReleaseNumber);

	if ( GetArrayLength(lstAutoCAD2013Versions) ) <= 0 then
	begin
		MsgBox (ExpandConstant('{cm:AutoCADMissing}'), mbError, MB_OK);
		result := false;
	end;

	// Verifica se o AutoCAD não está em execução
	if (result = true) then
	begin

	  // Verifica se o AutoCAD não está aberto
	  while( IsModuleLoaded( 'acad.exe' ) AND (iOpenCadReturn = IDOK) ) do
		begin
			iOpenCadReturn := MsgBox(ExpandConstant('{cm:AutoCADRunning}'), mbError, MB_OKCANCEL);
		end;
	  if (iOpenCadReturn = IDOK) then
	  begin
		result := true;
	  end
	  else begin
		result := false;
	  end;

	end;

end;

procedure CreateTheWizardPages;
var
	lstReleaseData: TArrayOfString;
	i: Integer;
	bAlreadyInstalled: Boolean;
begin

	Page := CreateCustomPage( wpSelectDir, ExpandConstant('{cm:CustomComponentTitle}'), ExpandConstant('{cm:CustomComponentSubtitle}'));
	checkListBox := TNewCheckListBox.Create(Page);
	checkListBox.Width := Page.SurfaceWidth;
	checkListBox.Flat := True;
	checkListBox.Parent := Page.Surface;

	SetArrayLength(lstAutoCADPaths, GetArrayLength(lstAutoCAD2013Versions));
	SetArrayLength(lstAutoCADRegPaths, GetArrayLength(lstAutoCAD2013Versions));
	SetArrayLength(lstAutoCADReleases, GetArrayLength(lstAutoCAD2013Versions));

	for i := 0 to GetArrayLength(lstAutoCAD2013Versions)-1 do
	begin
		lstAutoCADPaths[i] := GetAutoCADFolder(sAutoCAD2013ReleaseNumber, lstAutoCAD2013Versions[i])
		lstAutoCADRegPaths[i] := sAutoCAD2013ReleaseNumber + '\' + lstAutoCAD2013Versions[i];
		lstAutoCADReleases[i] := 'R19';
		lstReleaseData := GetAutoCADData(sAutoCAD2013ReleaseNumber, lstAutoCAD2013Versions[i]);
		bAlreadyInstalled :=  ShouldInitialMarkToInstall (lstAutoCADRegPaths[i]);
		checkMaxIndex := checkListBox.AddCheckBox(lstReleaseData[0],  '<' + lstReleaseData[1] + ' - ' + lstReleaseData[2] + '>', 0, bAlreadyInstalled, True, False, True, nil);
	end;

end;

procedure InitializeWizard;
begin
	CreateTheWizardPages;
end;